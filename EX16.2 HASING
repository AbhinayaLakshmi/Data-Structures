#include <stdio.h>
#include <stdlib.h>

#define TABLE_SIZE 10

typedef struct Node {
    int key;
    int value;
    struct Node* next;
} Node;

Node* hash_table[TABLE_SIZE];
int hash(int key) {
    return key % TABLE_SIZE;
}
void insert(int key, int value) {
    int index = hash(key);
    Node* new_node = (Node*)malloc(sizeof(Node));
    new_node->key = key;
    new_node->value = value;
    new_node->next = hash_table[index];
    hash_table[index] = new_node;
}
int search(int key) {
    int index = hash(key);
    Node* temp = hash_table[index];
    while (temp) {
        if (temp->key == key) {
            return temp->value;
        }
        temp = temp->next;
    }
    return -1; // Key not found
}

int main() {
    for (int i = 0; i < TABLE_SIZE; i++) {
        hash_table[i] = NULL;
    }
    insert(1, 10);
    insert(2, 20);
    insert(11, 110);
    insert(12, 120);
    printf("Value for key 1: %d\n", search(1));
    printf("Value for key 11: %d\n", search(11));
    printf("Value for key 3: %d\n", search(3));

    return 0;
}
