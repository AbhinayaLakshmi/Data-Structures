#include <stdio.h>
#include <stdlib.h>
#define MAX_VERTICES 10
struct Node {
    int vertex;
    struct Node* next;
};
struct Graph {
    struct Node* adjList[MAX_VERTICES];
};
struct Node* createNode(int v) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    if (newNode == NULL) {
        printf("Memory allocation failed!\n");
        exit(1);
    }
    newNode->vertex = v;
    newNode->next = NULL;
    return newNode;
}
void addEdge(struct Graph* graph, int src, int dest) {
    // Add an edge from src to dest
    struct Node* newNode = createNode(dest);
    newNode->next = graph->adjList[src];
    graph->adjList[src] = newNode;

    // For an undirected graph, add an edge from dest to src as well
    newNode = createNode(src);
    newNode->next = graph->adjList[dest];
    graph->adjList[dest] = newNode;
}

// Function to perform breadth-first search traversal of the graph
void BFS(struct Graph* graph, int start) {
    int visited[MAX_VERTICES] = {0}; // Initialize all vertices as not visited

    // Create a queue for BFS
    int queue[MAX_VERTICES];
    int front = 0, rear = 0;

    // Mark the current node as visited and enqueue it
    visited[start] = 1;
    queue[rear++] = start;

    while (front < rear) {
        // Dequeue a vertex from the queue and print it
        int vertex = queue[front++];
        printf("%d ", vertex);

        // Get all adjacent vertices of the dequeued vertex
        struct Node* temp = graph->adjList[vertex];
        while (temp != NULL) {
            int adjVertex = temp->vertex;
            if (!visited[adjVertex]) {
                visited[adjVertex] = 1;
                queue[rear++] = adjVertex;
            }
            temp = temp->next;
        }
    }
    printf("\n");
}

// Function to perform depth-first search traversal of the graph (recursive)
void DFS_recursive(struct Graph* graph, int vertex, int visited[]) {
    visited[vertex] = 1;
    printf("%d ", vertex);

    // Recur for all the vertices adjacent to this vertex
    struct Node* temp = graph->adjList[vertex];
    while (temp != NULL) {
        int adjVertex = temp->vertex;
        if (!visited[adjVertex]) {
            DFS_recursive(graph, adjVertex, visited);
        }
        temp = temp->next;
    }
}

// Function to perform depth-first search traversal of the graph (wrapper function)
void DFS(struct Graph* graph, int start) {
    int visited[MAX_VERTICES] = {0}; // Initialize all vertices as not visited
    DFS_recursive(graph, start, visited);
    printf("\n");
}

// Main function
int main() {
    struct Graph* graph = (struct Graph*)malloc(sizeof(struct Graph));
    if (graph == NULL) {
        printf("Memory allocation failed!\n");
        return 1;
    }
    for (int i = 0; i < MAX_VERTICES; i++) {
        graph->adjList[i] = NULL;
    }

    addEdge(graph, 0, 1);
    addEdge(graph, 0, 2);
    addEdge(graph, 1, 3);
    addEdge(graph, 1, 4);
    addEdge(graph, 2, 5);
    addEdge(graph, 2, 6);

    printf("Breadth-first search (BFS) traversal: ");
    BFS(graph, 0);

    printf("Depth-first search (DFS) traversal: ");
    DFS(graph, 0);

    return 0;
}
