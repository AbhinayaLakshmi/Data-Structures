#include <stdio.h>
#include <stdlib.h>
struct Node {
    int data;
    struct Node* next;
};
struct Node* createNode(int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    if (newNode == NULL) {
        printf("Memory allocation failed.\n");
        exit(1);
    }
    newNode->data = value;
    newNode->next = NULL;
    return newNode;
}
void insertAtBeginning(struct Node** head, int value) {
    struct Node* newNode = createNode(value);
    newNode->next = *head;
    *head = newNode;
}
void insertAfter(struct Node* prevNode, int value) {
    if (prevNode == NULL) {
        printf("Previous node cannot be NULL.\n");
        return;
    }
    struct Node* newNode = createNode(value);
    newNode->next = prevNode->next;
    prevNode->next = newNode;
}
void insertAtEnd(struct Node** head, int value) {
    struct Node* newNode = createNode(value);
    if (*head == NULL) {
        *head = newNode;
        return;
    }
    struct Node* temp = *head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newNode;
}
struct Node* findElement(struct Node* head, int value) {
    struct Node* temp = head;
    while (temp != NULL) {
        if (temp->data == value) {
            return temp;
        }
        temp = temp->next;
    }
    return NULL; // Element not found
}
struct Node* findNext(struct Node* currentNode) {
    if (currentNode == NULL || currentNode->next == NULL) {
        return NULL;
    }
    return currentNode->next;
}
struct Node* findPrevious(struct Node* head, struct Node* currentNode) {
    if (head == NULL || head == currentNode) {
        return NULL;
    }
    struct Node* temp = head;
    while (temp->next != NULL && temp->next != currentNode) {
        temp = temp->next;
    }
    return temp;
}
int isLast(struct Node* node) {
    return node->next == NULL ? 1 : 0;
}
int isEmpty(struct Node* head) {
    return head == NULL ? 1 : 0;
}
void deleteFirstNode(struct Node** head) {
    if (*head == NULL) {
        printf("List is already empty.\n");
        return;
    }
    struct Node* temp = *head;
    *head = (*head)->next;
    free(temp);
}
void deleteNodeAfter(struct Node* prevNode) {
    if (prevNode == NULL || prevNode->next == NULL) {
        printf("Previous node cannot be NULL or last node.\n");
        return;
    }
    struct Node* temp = prevNode->next;
    prevNode->next = temp->next;
    free(temp);
}
void deleteLastNode(struct Node** head) {
    if (*head == NULL) {
        printf("List is already empty.\n");
        return;
    }
    if ((*head)->next == NULL) {
        free(*head);
        *head = NULL;
        return;
    }
    struct Node* temp = *head;
    while (temp->next->next != NULL) {
        temp = temp->next;
    }
    free(temp->next);
    temp->next = NULL;
}
void deleteList(struct Node** head) {
    struct Node* current = *head;
    struct Node* next;
    while (current != NULL) {
        next = current->next;
        free(current);
        current = next;
    }
    *head = NULL;
}
void printList(struct Node* head) {
    struct Node* temp = head;
    while (temp != NULL) {
        printf("%d -> ", temp->data);
        temp = temp->next;
    }
    printf("NULL\n");
}

int main() {
    struct Node* head = NULL;

    insertAtBeginning(&head, 3);
    insertAtBeginning(&head, 1);
    insertAtEnd(&head, 5);
    insertAfter(head->next, 2);
    printf("List: ");
    printList(head);

    printf("Finding element 2: %s\n", findElement(head, 2) ? "Found" : "Not found");
    printf("Finding next element after 2: %d\n", findNext(findElement(head, 2))->data);
    printf("Finding previous element before 2: %d\n", findPrevious(head, findElement(head, 2))->data);

    printf("Is last: %s\n", isLast(findElement(head, 5)) ? "Yes" : "No");
    printf("Is empty: %s\n", isEmpty(head) ? "Yes" : "No");

    deleteFirstNode(&head);
    printf("List after deleting first node: ");
    printList(head);

    deleteNodeAfter(head);
    printf("List after deleting node after head: ");
    printList(head);

    deleteLastNode(&head);
    printf("List after deleting last node: ");
    printList(head);

    deleteList(&head);
    printf("List after deleting all nodes: ");
    printList(head);

    return 0;
}
